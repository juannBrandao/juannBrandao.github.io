{"version":3,"sources":["services/api.js","utils/utils.js","components/SearchByLocation/index.jsx","App.jsx","index.js"],"names":["api","axios","create","baseURL","APIkey","convertKelvinToCelcius","tempToConvert","kelvin","toString","replace","Math","round","Number","days","months","currentDateFormatted","data","Date","day","getDay","dayMonth","getMonth","padStart","moth","FullYear","getFullYear","dateFormatSunriseSunset","timestamp","date","hours","getHours","minutes","getMinutes","SearchByLocation","useState","weatherInformation","setWeatherInformation","localization","setLocalization","setPosition","position","get","coords","latitude","longitude","then","response","catch","err","console","error","useEffect","navigator","geolocation","getCurrentPosition","getLocation","className","name","sys","country","main","temp_min","weather","length","src","icon","alt","temp","description","temp_max","humidity","sunrise","sunset","type","placeholder","data-testid","value","onChange","e","target","onClick","cityName","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3f300a6.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n  baseURL: 'http://api.openweathermap.org/data/2.5'\r\n})","export const APIkey =  'eb802bb5b786b73261106ed8bcad64ef'\r\n\r\nexport function convertKelvinToCelcius(tempToConvert) {\r\n  const kelvin = tempToConvert?.toString().replace(\",\", \".\");\r\n  return Math.round(Number(kelvin) - 273.15);\r\n}\r\n\r\nconst days = [\"Domingo\", \"Segunda-feira\", \"Terça-feira\", \"Quarta-feira\", \"Quinta-feira\", \"Sexta-feira\", \"Sábado\"];\r\nconst months = [\"janeiro\", \"fevereiro\", \"março\", \"abril\", \"maio\", \"junho\", \"julho\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"dezembro \"];\r\n\r\nexport function currentDateFormatted(){\r\n  var data = new Date(),\r\n      day  = days[data.getDay()],\r\n      dayMonth  = (data.getMonth()+1).toString().padStart(2, '0'),\r\n      moth = months[data.getMonth()],\r\n      FullYear = data.getFullYear();\r\n  return `${day}, ${dayMonth} de ${moth} de ${FullYear}`\r\n}\r\n\r\nexport function dateFormatSunriseSunset (timestamp){\r\n  var date = new Date(timestamp);\r\n  const hours = date.getHours()\r\n  const minutes = date.getMinutes() \r\n  return `${hours}:${minutes}`\r\n}","import \"./styles.scss\";\r\nimport { api } from \"../../services/api\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  APIkey,\r\n  convertKelvinToCelcius,\r\n  currentDateFormatted,\r\n  dateFormatSunriseSunset,\r\n} from \"../../utils/utils\";\r\n\r\nexport function SearchByLocation() {\r\n  const [weatherInformation, setWeatherInformation] = useState({});\r\n  const [localization, setLocalization] = useState(\"\");\r\n  useEffect(() => {\r\n    getLocation();\r\n  }, []);\r\n\r\n  function getLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(setPosition);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  function setPosition(position) {\r\n    api\r\n      .get(\r\n        `/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${APIkey}&lang=pt_br`\r\n      )\r\n      .then((response) => setWeatherInformation(response.data))\r\n      .catch((err) => console.error(err));\r\n  }\r\n\r\n  function handleNewWeatherResearch(cityName) {\r\n    if (!localization) {\r\n      return;\r\n    }\r\n    api\r\n      .get(`/weather?q=${cityName}&appid=${APIkey}&lang=pt_br`)\r\n      .then((response) => setWeatherInformation(response.data))\r\n      .catch((err) => console.error(err));\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <section className=\"weatherInformation\">\r\n        <div className=\"city​​Weather\">\r\n          <h1>\r\n            {weatherInformation?.name}, {weatherInformation?.sys?.country}\r\n          </h1>\r\n          <p>{currentDateFormatted()}</p>\r\n        </div>\r\n        <div className=\"temperatureClimate\">\r\n          <div className=\"minimumTemperature\">\r\n            <p>Minima</p>\r\n            <h3>\r\n              {convertKelvinToCelcius(weatherInformation.main?.temp_min)}°C\r\n            </h3>\r\n          </div>\r\n          {weatherInformation?.weather &&\r\n          !!weatherInformation.weather.length ? (\r\n            <div className=\"currentTemperature\">\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${weatherInformation?.weather[0]?.icon}@2x.png`}\r\n                alt=\"Nublado\"\r\n              />\r\n              <h1>{convertKelvinToCelcius(weatherInformation.main?.temp)}°C</h1>\r\n              <h3>{weatherInformation.weather[0]?.description}</h3>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"MaximumTemperature\">\r\n            <p>Maxima</p>\r\n            <h3>\r\n              {convertKelvinToCelcius(weatherInformation.main?.temp_max)}°C\r\n            </h3>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"dayInfo\">\r\n          <span>Umidade</span>\r\n          <span>{weatherInformation.main?.humidity}%</span>\r\n          <span>Nascer do sol</span>\r\n          <span>\r\n            {dateFormatSunriseSunset(weatherInformation?.sys?.sunrise)}\r\n          </span>\r\n          <span>pôr do sol</span>\r\n          <span>\r\n            {dateFormatSunriseSunset(weatherInformation?.sys?.sunset)}\r\n          </span>\r\n        </div>\r\n      </section>\r\n      <section className=\"searchSection\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Buscar por cidade\"\r\n          data-testid=\"Search_by_city\"\r\n          value={localization}\r\n          onChange={(e) => setLocalization(e.target.value)}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          data-testid=\"button_Search_by_city\"\r\n          onClick={() => handleNewWeatherResearch(localization)}\r\n        >\r\n          Procurar\r\n        </button>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n"," \nimport { SearchByLocation } from './components/SearchByLocation';\nimport './styles/global.scss';\n\nfunction App() {\n  return (\n    <>\n      <SearchByLocation />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}